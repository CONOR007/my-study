//v8采用即时编译 v8在32位操作系统内存不超过800M 在64位操作系统内存不超过1.5G
//v8垃圾回收策略 采用分代回收的思想(新生代,老生代),针对不同的分代采用不同的算法 (常用GC算法:分代回收 空间赋值 标记清除 标记整理 标记增量)
//v8新生代回收(空间换时间):就是存活时间较短的对象,存储在小空间中(32位16M 64位32M). 新生代空间也分成两个等量大小的空间,使用空间为from,空闲空间为to 活动对象存储于from标记整理后的活动对象拷贝到to from和to交换空间完成释放. 拷贝过程中可能会出现晋升(从新生代移动到老生代,一轮GC还存活的新生代需要晋升,to空间使用率超过25%需要晋升)
//v8老生代回收:就是存活时间较长的对象,存储在大空间中(32位700M 46位1.4G). 主要采用标记清除实现GC,在老生代空间不足时会采用标记整理进行空间优化,采用增量标记进行回收效率优化(代码和标记算法嵌套).